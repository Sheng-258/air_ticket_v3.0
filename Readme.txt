1、使用套接字进行TCP/IP通信，设计并实现了网络通信协议，确保了数据的可靠传输；
   1. **确定协议结构**：
   - 定义数据包的格式，包括头部和数据部分。
   - 确定如何标识消息的开始和结束，以及如何区分不同类型的消息。
   2. **建立连接**：
   - 使用`socket()`, `bind()`, `listen()`, 和 `accept()` 函数建立服务器端的监听套接字。
   - 使用`socket()`, `connect()` 函数建立客户端的连接。
   3. **数据传输**：
   - 使用`send()`和`recv()`函数进行数据的发送和接收。
   - 确保数据的完整性，可以通过添加校验和或序列号来实现。 
   4. **流控制**：
   - 为了防止发送方压倒接收方，实现流量控制机制，如滑动窗口协议。
   5. **错误处理**：
   - 处理网络中断、超时和其他异常情况。
   - 实现重试机制和错误恢复策略。
   6. **数据序列化**：
   - 确定如何将数据结构转换为字节流，以及如何将接收到的字节流解析回数据结构。
   7. **协议版本管理**：
   - 为协议定义版本号，以便在升级或修改协议时能够向后兼容。
   8. **安全性**：
   - 使用SSL/TLS等加密技术保护数据传输的安全。
   - 实现身份验证机制，确保通信双方的身份。
   9. **性能优化**：
   - 优化数据包的大小和传输频率，以减少延迟和提高吞吐量。
   - 使用非阻塞IO或异步IO来提高并发处理能力。
   10. **测试**：
    - 进行单元测试、集成测试和压力测试，确保协议在各种条件下都能正常工作。
    - 使用网络模拟工具来测试网络不稳定情况下的协议表现。
   11. **文档**：
    - 编写详细的协议文档，包括数据包格式、消息类型、错误代码等。
   12. **协议扩展**：
    - 设计协议时考虑未来的扩展性，以便添加新功能而不影响现有系统。
   13. **多线程或异步处理**：
    - 考虑使用多线程或异步IO来处理多个并发连接，提高服务的响应速度和吞吐量。
   14. **资源管理**：
    - 确保所有网络资源（如套接字和内存）在使用完毕后都能被正确释放。

2、使用POSIX线程库来处理并发请求，设计了线程同步与互斥机制，避免了数据竞争和死锁等问题；
   一、互斥锁（Mutexes）：
      使用互斥锁来保护共享资源，确保一次只有一个线程可以访问这些资源。
      在访问共享资源之前锁定互斥锁，在访问完成后释放锁。
   二、条件变量（Condition Variables）：
      条件变量用于线程间的同步，允许线程在特定条件成立之前挂起等待。
      通常与互斥锁结合使用，以确保在条件变量被触发时，只有一个线程能够执行。
   三、读写锁（Read-Write Locks）：
      当资源被多个线程频繁读取但较少写入时，读写锁是一种有效的同步机制。
      允许多个读线程同时访问资源，但在写线程访问时，所有其他线程（读或写）都必须等待。
   四、避免死锁：
      确保所有线程以相同的顺序请求锁。
      使用pthread_mutex_trylock或设置超时来尝试获取锁，以避免无限期等待。
      考虑使用死锁检测算法或工具来识别潜在的死锁问题。

3、调用MySQL的API进行数据库查询、更新等操作，设计了数据库表结构和索引策略，优化了数据查询性能。
   数据库是机票预订系统的另一个重要组件，它用于存储和管理系统的各种数据。在机票预订系统中，数据库通常包括以下几个部分：
   一、航班信息表：用于存储航班相关的信息，如航班号、起降时间、舱位等。
   二、用户信息表：用于存储用户相关的信息，如用户名、密码、联系方式等。
   三、订单信息表：用于存储订单相关的信息，如订单号、用户ID、航班ID、支付信息等。
   四、其他信息表：用于存储其他相关的信息，如航空公司信息、机场信息等。
   SQL文件是连接机票预订系统的源码和数据库之间的桥梁。它是一组SQL语句的集合，用于对数据库进行查询、插入、更新和删除操作。在机票预订系统中，SQL文件通常包括以下几个部分：
   一、查询语句：用于从数据库中查询航班信息和用户信息等。
   二、插入语句：用于将订单信息和支付信息等插入到数据库中。
   三、更新语句：用于更新航班信息和用户信息等。
   四、删除语句：用于删除不再需要的航班信息和用户信息等
